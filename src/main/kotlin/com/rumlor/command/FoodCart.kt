package com.rumlor.command

import com.rumlor.api.CreateFoodCartCommand
import com.rumlor.api.DeSelectProductCommand
import com.rumlor.api.SelectProductCommand
import com.rumlor.events.DeSelectedProductEvent
import com.rumlor.events.FoodCartCreatedEvent
import com.rumlor.events.SelectedProductEvent
import com.rumlor.exception.ProductDeSelectionException
import org.axonframework.commandhandling.CommandHandler
import org.axonframework.eventsourcing.EventSourcingHandler
import org.axonframework.modelling.command.AggregateIdentifier
import org.axonframework.modelling.command.AggregateLifecycle
import org.axonframework.modelling.command.AggregateRoot
import org.jboss.logging.Logger
import java.util.*

@AggregateRoot
open class FoodCart()  {

    @AggregateIdentifier
    lateinit var foodCartId: UUID

    lateinit var selectedProducts:java.util.HashMap<UUID,Int>

    private val logger:Logger = Logger.getLogger("FoodCartAggregate")

    @CommandHandler
    constructor(command: CreateFoodCartCommand):this(){
        logger.info("create food cart command  arrived:$command")
        AggregateLifecycle.apply(FoodCartCreatedEvent(UUID.randomUUID()))
    }


    @CommandHandler
    fun on(selectProductCommand: SelectProductCommand){
        logger.info("select product command arrived:$selectProductCommand")
        AggregateLifecycle.apply(SelectedProductEvent(foodCartId,selectProductCommand.productId,selectProductCommand.quantity))
    }

    @CommandHandler
    fun on(deSelectProductCommand: DeSelectProductCommand) {
        logger.info("deselect product command arrived: $deSelectProductCommand")
        if (selectedProducts.containsKey(deSelectProductCommand.productId))
            AggregateLifecycle.apply(DeSelectedProductEvent(foodCartId,deSelectProductCommand.productId,deSelectProductCommand.quantity))
        else
            throw ProductDeSelectionException()
    }


    //handler for events generated by aggregate
    @EventSourcingHandler
    fun on(event: FoodCartCreatedEvent) {
        logger.info("food cart create event arrived: $event")
        foodCartId = event.foodCardId
        selectedProducts = HashMap()
    }


    //handler for events generated by aggregate
    @EventSourcingHandler
    fun on(event: SelectedProductEvent) {
        logger.info("select product  event sourced event arrived: $event")
        selectedProducts.merge(event.productId, event.quantity, Int::plus)
    }

    @EventSourcingHandler
    fun on(event: DeSelectedProductEvent) {
        logger.info("deselect product  event sourced event arrived: $event")
        selectedProducts.remove(event.productId)
    }
}